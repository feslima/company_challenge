version: '3.8'

services:
  backend:
    build:
      context: .
      dockerfile: ./Dockerfile
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - ./:/usr/src/backend/
    ports:
      - 8000:8000
    env_file:
      - ./configurations/dev.env
    environment:
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - CELERY_BROKER_URL=redis://redis:6379
    depends_on:
      redis:
        condition: service_healthy
      db:
        condition: service_healthy
  db:
    image: postgres:13.0-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    ports:
      - 5432:5432
    env_file:
      - ./configurations/dev.env
    healthcheck:
      # condition to ensure deployment safety
      test:
        [
          "CMD-SHELL",
          "pg_isready -d $$POSTGRES_DB -U $$POSTGRES_USER"
        ]
      interval: 10s
      timeout: 5s
      retries: 5
  redis:
    image: redis:alpine
    ports:
      - 6379:6379
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 2s
      timeout: 3s
      retries: 15
  celery:
    build:
      context: .
      dockerfile: ./Dockerfile
    command: celery --app core worker --loglevel=INFO
    env_file:
      - ./configurations/dev.env
    environment:
      - CELERY_BROKER_URL=redis://redis:6379
    volumes:
      - ./:/usr/src/backend/
    depends_on:
      redis:
        condition: service_healthy
  celery-beat:
    build:
      context: .
      dockerfile: ./Dockerfile
    command: celery --app core beat --loglevel=INFO
    env_file:
      - ./configurations/dev.env
    environment:
      - CELERY_BROKER_URL=redis://redis:6379
    volumes:
      - ./:/usr/src/backend/
    depends_on:
      redis:
        condition: service_healthy

volumes:
  postgres_data:
